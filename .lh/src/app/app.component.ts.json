{
    "sourceFile": "src/app/app.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1678052053883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1678052086673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,10 @@\n           cuadrado_variableX2: variableX2 * variableX2\n         }\n         this.dataFormattedMultiple.push(object)\n       }\n+      console.log(' this.dataFormattedMultiple',  this.dataFormattedMultiple);\n+      \n \n       if (column1 > dataArray.length || column2 > dataArray.length) {\n         alert('Valores inv치lidos para columnas')\n         return false\n"
                },
                {
                    "date": 1678052583045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,11 +130,8 @@\n           cuadrado_variableX2: variableX2 * variableX2\n         }\n         this.dataFormattedMultiple.push(object)\n       }\n-      console.log(' this.dataFormattedMultiple',  this.dataFormattedMultiple);\n-      \n-\n       if (column1 > dataArray.length || column2 > dataArray.length) {\n         alert('Valores inv치lidos para columnas')\n         return false\n       }\n"
                },
                {
                    "date": 1678124204289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,10 @@\n   Generate() {\n     const File: File = this.dataFile\n     if (File.type == 'text/csv') {\n       this.data = []\n+      this.dataFormattedSimple = []\n+      this.dataFormattedMultiple = []\n \n       File.text().then((data) => {\n         const list = data.split(\"\\n\")//.splice(0,1);\n         const initialCell = this.cellStart ? this.cellStart - 1 : 0\n"
                }
            ],
            "date": 1678052053883,
            "name": "Commit-0",
            "content": "import { dataMultipleI } from './components/regression-multiple/regression-multiple.component';\nimport { Component, OnInit } from '@angular/core';\nimport { dataSimpleI } from './components/regression-simple/regression-simple.component';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  method: 'Simple' | 'Multiple' = 'Simple'\n\n  dataFile: any\n  hasFile = false\n\n  column1: any\n  column2: any\n  column3: any\n  cellStart: any\n\n\n  data: any[] = []\n  title = 'TestMachineL';\n  dataFormattedSimple: dataSimpleI[] = []\n  dataFormattedMultiple: dataMultipleI[] = []\n\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  setMethod(method:'Simple'|'Multiple'){\n    if(method == 'Simple') this.method == 'Simple' ? '':this.method = 'Simple'\n    if(method == 'Multiple') this.method == 'Multiple' ? '':this.method = 'Multiple'\n      \n  }\n\n  onFileSelected(event: any) {\n    if (event.target.files.length > 0) {\n      this.dataFile = event.target.files[0] as File\n      if (this.dataFile.type == 'text/csv') {\n        this.hasFile = true;\n      }\n    }\n  }\n\n  Generate() {\n    const File: File = this.dataFile\n    if (File.type == 'text/csv') {\n      this.data = []\n\n      File.text().then((data) => {\n        const list = data.split(\"\\n\")//.splice(0,1);\n        const initialCell = this.cellStart ? this.cellStart - 1 : 0\n\n        list.splice(0, initialCell);\n        list.forEach((e: any) => {\n          this.data.push(e);\n        });\n\n        if (this.method == 'Simple') {\n          this.setDataFormattedSimple();\n        } else if (this.method == 'Multiple') {\n          this.setDataFormattedMultiple()\n        }\n      })\n\n    }\n  }\n\n  setDataFormattedSimple() {\n    const column1 = this.column1 ? this.column1 : 1\n    const column2 = this.column2 ? this.column2 : 2\n    this.dataFormattedSimple = []\n    this.data.every((element) => {\n      const dataArray = element.split(',')\n      let variable_time = parseFloat(dataArray[0])\n      let variable1 = parseFloat(dataArray[column1 - 1])\n      let variable2 = parseFloat(dataArray[column2 - 1])\n      if (variable1 != null && variable1 != undefined && variable2 != null &&  variable2 != undefined ) {\n        const object: dataSimpleI = {\n          variable_time,\n          variable1,\n          variable2,\n          variable1_X_variable2: variable1 * variable2,\n          cuadrado_variable1: variable1 * variable1,\n          variable1_menos_proVariable1: 0,\n          variable2_menos_proVariable2: 0,\n          cuadrado_variable1_menos_proVariable1: 0,\n          cuadrado_variable2_menos_proVariable2: 0,\n          variable1_menos_proVariable1_X_variable2_menos_proVariable2: 0\n\n        }\n        this.dataFormattedSimple.push(object)\n      }\n\n      if (column1 > dataArray.length || column2 > dataArray.length) {\n        alert('Valores inv치lidos para columnas')\n        return false\n      }\n      else return true\n    })\n  }\n\n  setDataFormattedMultiple(){\n    const column1 = this.column1 ? this.column1 : 1\n    const column2 = this.column2 ? this.column2 : 2\n    const column3 = this.column3 ? this.column3 : 3\n    this.dataFormattedSimple = []\n    this.data.every((element) => {\n      const dataArray = element.split(',')\n      let variableY = parseFloat(dataArray[column1 - 1])\n      let variableX1 = parseFloat(dataArray[column2 - 1])\n      let variableX2 = parseFloat(dataArray[column3 - 1])\n\n      if (variableY != null && variableY != undefined && variableX1 != null &&  variableX1 != undefined && variableX2 != null && variableX2 != undefined ) {\n        const object: dataMultipleI = {\n          variableX1,\n          variableX2,\n          variableY,\n          variableX1_X_variableY: variableX1 * variableY,\n          variableX1_X_variableX2: variableX1 * variableX2,\n          variableX2_X_variableY: variableX2 * variableY,\n          cuadrado_variableY: variableY * variableY,\n          cuadrado_variableX1: variableX1 * variableX1,\n          cuadrado_variableX2: variableX2 * variableX2\n        }\n        this.dataFormattedMultiple.push(object)\n      }\n\n      if (column1 > dataArray.length || column2 > dataArray.length) {\n        alert('Valores inv치lidos para columnas')\n        return false\n      }\n      else return true\n    })\n  }\n\n  \n}\n"
        }
    ]
}